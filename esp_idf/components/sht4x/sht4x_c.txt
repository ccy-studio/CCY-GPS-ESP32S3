

#include "sht4x.h"

/* all measurement commands return T (CRC) RH (CRC) */
#define SHT4X_CMD_MEASURE_HPM 0xFD
#define SHT4X_CMD_MEASURE_LPM 0xE0
#define SHT4X_CMD_READ_SERIAL 0x89
#define SHT4X_CMD_DURATION_USEC 1000

#define SHT4X_ADDRESS 0x44

static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;


TwoWire* wire;

void sensirion_sleep_usec(uint32_t useconds);
int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count);
                           int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count);

int16_t sht4x_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
    int16_t ret;

    ret = sht4x_measure();
    if (ret)
        return ret;
    sensirion_sleep_usec(sht4x_cmd_measure_delay_us);
    return sht4x_read(temperature, humidity);
}

int16_t sht4x_measure(void) {
    return sensirion_i2c_write(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
}

int16_t sht4x_read(int32_t* temperature, int32_t* humidity) {
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT4X_ADDRESS, words,
                                           SENSIRION_NUM_WORDS(words));
    
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 65535 - 45
     * Relative Humidity = 125 * (S_RH / 65535) - 6
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
    *humidity = ((15625 * (int32_t)words[1]) >> 13) - 6000;

    return ret;
}

int16_t sht4x_probe(TwoWire& w) {
    wire = &w;
    uint32_t serial;

    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
    if (enable_low_power_mode) {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}

int16_t sht4x_read_serial(uint32_t* serial) {
    const uint8_t cmd = SHT4X_CMD_READ_SERIAL;
    int16_t ret;
    uint16_t serial_words[SENSIRION_NUM_WORDS(*serial)];

    ret = sensirion_i2c_write(SHT4X_ADDRESS, &cmd, 1);
    if (ret)
        return ret;

    sensirion_sleep_usec(SHT4X_CMD_DURATION_USEC);
    ret = sensirion_i2c_read_words(SHT4X_ADDRESS, serial_words,
                                   SENSIRION_NUM_WORDS(serial_words));
    *serial = ((uint32_t)serial_words[0] << 16) | serial_words[1];

    return ret;
}

uint8_t sht4x_get_configured_address(void) {
    return SHT4X_ADDRESS;
}




int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count) {
    uint8_t readData[count];
    uint8_t rxByteCount = 0;

    // 2 bytes RH, 1 CRC, 2 bytes T, 1 CRC
    wire.requestFrom(address, count);

    while (wire.available()) {  // wait till all arrive
        readData[rxByteCount++] = wire.read();
        if (rxByteCount >= count)
            break;
    }

    memcpy(data, readData, count);

    return 0;
}

int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count) {
    wire.beginTransmission(address);
    wire.write(data, count);
    wire.endTransmission();

    return 0;
}


void sensirion_sleep_usec(uint32_t useconds) {
    delay((useconds / 1000) + 1);
}